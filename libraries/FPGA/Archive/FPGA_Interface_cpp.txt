
//
// FPGA_Interface.cpp
//
//    - messages and bit-banging to communicate with FPGA
//

#include "FPGA_Interface.h"

// static InterruptHandler needs a copy of "this"
FPGA_Interface *FPGA_Interface::thisPtr = NULL;

FPGA_Interface::FPGA_Interface ()
{
    thisPtr = this;
    callback = NULL; // InterruptCallback
}

//*******************************************************************

void FPGA_Interface::ConfigurePins ()
{
    pinMode (DataIn_Pin,     INPUT);  // bit from FPGA -> Arduino
    pinMode (ShiftInput_Pin, OUTPUT);
    pinMode (LastBit_Pin,    INPUT);
    pinMode (FirstBit_Pin,   INPUT_PULLUP);

    pinMode (DataOut_Pin,     OUTPUT); // bit from Arduino -> FPGA
    pinMode (ReadInput_Pin,   OUTPUT);
    pinMode (DataOutDone_Pin, OUTPUT);
  
    digitalWrite (ShiftInput_Pin,  0);
    digitalWrite (DataOut_Pin,     0);
    digitalWrite (ReadInput_Pin,   0);
    digitalWrite (DataOutDone_Pin, 0);  
}


void FPGA_Interface::AttachInterrupt ()
{
    attachInterrupt (digitalPinToInterrupt (FirstBit_Pin), InterruptHandler, RISING);
}

void FPGA_Interface::DetachInterrupt ()
{
    detachInterrupt (digitalPinToInterrupt (FirstBit_Pin));
}

//*******************************************************************

void FPGA_Interface::RegisterInterruptCallback (InterruptCallback cb)
{
   callback = cb;
}

//*******************************************************************

//
// this is a static function, so it uses copy of "this" to reference instance variables
//
void FPGA_Interface::InterruptHandler ()
{
    if (thisPtr->callback != NULL)
        thisPtr->callback ();
}

//*******************************************************************

const int BitsPerUnsignedLong = 32; // only used to end loop if no "lastBit" read

unsigned long FPGA_Interface::QReadOneWord ()
{    
    unsigned long data = 0;

    //
    // this loop should always end with "break". i == BitsPerUnsignedLong is an error
    //
    for (int i=0; i<BitsPerUnsignedLong; i++) 
    {
        int b = digitalRead (DataIn_Pin);
        b &= 1;

        data <<= 1;
        data |= b;

        int done = digitalRead (LastBit_Pin);
        
        digitalWrite (ShiftInput_Pin, 1);
        digitalWrite (ShiftInput_Pin, 0);    

        if (done & 1)
            break;
    }
  
    return data;
}
  
//*******************************************************************

// Shift out one byte, MSB first

void FPGA_Interface::WriteOneByte (unsigned char b)
{
  for (int i=0; i<8; i++)
  {
    int mask = 1 << (7 - i);
    int thisBit = (b & mask) == 0 ? 0 : 1;

    digitalWrite (DataOut_Pin, thisBit == 0 ? 0 : 1);
    digitalWrite (ReadInput_Pin, 1);
    digitalWrite (ReadInput_Pin, 0);
  }

  digitalWrite (DataOutDone_Pin, 1);
  digitalWrite (DataOutDone_Pin, 0);
}
